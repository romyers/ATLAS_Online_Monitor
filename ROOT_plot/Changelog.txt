## Known issues

- Saving plots is slow. Batch mode greatly speeds things up, but also breaks 
  the GUI.
- Plot saving does not interact well with TDC and ADC plot windows opened 
  after the save is started. (cd() issues)
- Plot saving blocks the decoder.
- Closing a progress bar window causes a segfault.
- PlotSavingOperations still depends on progress bar view.
- Plot updates block the decode thread. This doesn't matter much, but it would
  be nice if it didn't happen.
- Plot updates sometimes occur in the decode thread (e.g. when new data comes
  in) and sometimes occur in the UI thread (e.g. when the plot is first 
  opened). This is a bit messy. See about making all plot updates happen in the
  same thread.
- UI blocks during plot updates when plots are open.
- The noise rate display graphics have some odd artifacts.
- Sometimes we end up with more events than packets. I'm not sure if this is
  valid behavior.

## TODO:

- Most of the plot saving issues should be cleaned up if we can run plot saving
  in a separate thread. But we have to figure out how to cd back to whatever
  canvas had been cd'd to before we unlock the ui lock in order to put the
  plot saving on its own thread without breaking everything.
    -- Actually, worse, another pad could be cd'd while we're working with
       one pad. We have to guard every cd statement everywhere with the UI
       lock.

- Display the .dat save file to the user when starting a run.
- Eliminate need for UISignals.cpp
- Separate data aggregation from PacketDecodingOperations.
- Now that TQObjects are inherited, eliminate need for signal buses
  and pass information out of UI elements. E.g. pressing 'startRun' should
  emit an event that tells us the start run button was pressed, and startDAQ
  should use that event to actually start the run. In general, we want to
  decouple the UI from the machinery.
- Add a console version of the online monitor, like the old StartMonitor.cpp,
  that does not use the UI.
- Consolidate DataCaptureOperations, PacketDecodingOperations, and 
  DataRunOperations. Eliminate LockableStream and just maintain a mutex in the
  new top level logic flow.
- Documentation.
- Separate headers from source files in directory structure to match pattern in
  the sMDT reco repo.
- Make it so that closing a tab opens the next or previous tab.
- Create a top-level logic flow for ecap and decode modules that can be used
  both in the standalone and in the monitor.
- Eliminate the need to have distinct names for menu options from different
  submenus.
- Decouple modules from each other as much as possible.
- Make DAQData not be a singleton anymore.
- Pull signal/slot interface between GUI and program logic out of the GUI 
  module.
- Remember which tabs were open in DAQState and reopen them on startup.
- Consider flattening some of the GUI. E.g. device selector and file selector 
  can be folded into data source panel.
- Integrate progress bar into DAQManager window.
- Consider switching to a pattern where program elements are coupled to and
  collocated with associated GUI elements. E.g. the data source panel can
  belong to the ecap module, the error view to the logger, and the plot tabs
  to the decoder module. This would probably make more sense than decoupling
  the GUI entirely and pushing data down to it from above. Instead, we want a
  pattern not unlike VUE SFCs.
    - We might want to eliminate the GUI core library then to simplify the
      dependency structure.
    - This is not a priority right now though.
- Stretch goal -- make tabs dockable/undockable. There is a ROOT object for 
  this, but it's not quite what we want.
- Eliminate need for a 'lockable' data stream by pulling together the
  different *Operations.h/cpp files.
- Turn the field that says, e.g. "Started Run: [RUN LABEL]" into a general
  user feedback field. E.g. it should become 'saved snapshot to folder: ...'
  when plots are saved.
- Better resize behavior
- SignalHandlers is an ambiguous name -- SigHandlers.h handles OS signals,
  SignalHandlers.h handles GUI signals.
- Address any part of the code that might not be portable. We already handled
  endianness. But let's look at e.g. signal handling and directory 
  construction.
- Try to move log file setup to somewhere that makes more sense.
- Add a settings option for the directory in which to save dat and log files.
- Test cases
- Labels on Noise Rate Display
- Gray out interface while an alert box is open
- Allow user to click on a plot to blow it up, then click again to shrink it 
  back. I.e. if I'm on TDC Overview and click on the TDC 2 plot, this should
  fullscreen the TDC 2 plot. Alternatively, this could also automatically
  open the TDC 2 channel plot tab.

## FIXME

- Quick segfault occurs when running with enable_hit and enable_trigger on from
  xkcu vio 7. Only happens if plot tabs are open. Maybe GUI updates can't
  keep up with the decoder when packets are coming in that quickly?

-------------------------------------------------------------------------------

## 2024-01-10

## Changed

- Limited the maximum number of signals that can be processed in one iteration
  of the decoder. 
- Saving a snapshot for a run that already has a saved snapshot is now
  handled correctly. A distinct directory will be made for the second
  snapshot.

-------------------------------------------------------------------------------

## 2024-01-09

## Added

- Added EventBufferValidator.h/.cpp to provide validation for event IDs.
- Added validation to ensure that TDC headers within an event have
  matching event IDs.

## Changed

- TDC Error signals are no longer excluded from their events. Events now 
  contain all associated TDC headers, trailers, and errors.
- TDC headers and trailers are no longer filtered out in the hit finding step.
  Events now provide two signal accessors. The first, Event::Signals(), now has
  the legacy behavior, where TDC header, trailer, and error signals are not 
  included. The second, Event::Signals_All(), includes all signals associated 
  with the event, including TDC header, trailer, and error signals.
- Moved log file setup into DataCaptureOperations.cpp. Log files will no longer
  be saved for DAT file sources.
- The "Start Run" button is now kept disabled at the conclusion of a run until 
  the run has fully stopped.
- Cleaned up plot labels.
- Pressing 'exit' now visually disables interface elements.
- Persistent settings are now saved on start run as well as on exit.

## Fixed

- Log files were erroneously saved in a folder other than the main data folder.
- Noise rate display graphs now have correct x-axis bounds.
- If pressing start run produces an exception, the start button is now 
  reenabled and the stop button kept disabled.

-------------------------------------------------------------------------------

## 2024-01-08

## Added

- Added event validation checking that the hit count reported by the event
  trailer signal matches the total number of signals plus error words.
- Added validation of event IDs, and implemented error logging in cases
  where events are repeated or lost.

## Changed

- Removed error log autoscrolling pending a more rigorous implementation.
- EventBuffer is now a local variable inside the decode step, eliminating
  need to store it as a class member or clear it on each step.

-------------------------------------------------------------------------------

## 2024-01-07

## Changed

- Error log now autoscrolls to the bottom when updated.

## Fixed

- Input filenames are now validated properly, and incorrect input filenames 
  will no longer produce a segfault.
- Fixed undefined behavior when double-saving plots. Plot saving now checks
  to make sure a save operation is not already happening before beginning the
  save.

-------------------------------------------------------------------------------

## 2023-12-22

## Added

- Added SignalHandlers.h/.cpp to wire together interfaces for the GUI and data
  acquisition systems.

## Changed

- DAQManager is now a TGMainFrame, and is no longer wrapped by another main 
  frame.
- PCapDevices are now just structs with const strings storing name and
  description.
- Data source panel defaults are now set in StartDAQ.cpp.
- Data source panel no longer depends on DAQState.
- The run status tag from the run viewer now appears as a TGLabel on the 
  DAQManager.

## Removed

- Eliminated Terminator.h/.cpp in favor of stop functions in the decode, ecap,
  and GUI modules.
- Removed runStarted from DAQState in favor of a public flag in 
  DataRunOperations.cpp.
- Removed "(None)" entry from device selector panel. Device selector panel will
  now default to the first device.
- Removed apply and revert buttons from the data source panel. Changes are now
  applied automatically.

-------------------------------------------------------------------------------

## 2023-12-21

## Added

- Incorporated src/reco and MuonReco folders from the sMDT reco repo.
- Added a MuonReco static library to cmake.
- Added doxygen documentation for the decoder module.
- Added GUI folder and started moving GUI functionality into it.

## Changed

- Applied ClassDef/ClassImpl macros to classes using signal/slot communication.
- Restored full functionality in the compilable version.
- Began reworking the directory structure.
- Removed lockable stream dependence from decode/ecap modules.
- Cleaned out some unnecessary methods in PCapSessionHandler.
- Separated DataCaptureOperations and PacketDecodingOperations from ecap/decode
  modules. 
- Removed SignalReader from signal decoding in favor of simpler functions.
- Renamed Decoder::refresh() to Decoder::decodeStream().
- The endianness of the system architecture is now checked before byteswapping
  is performed.
- Broke up StartDAQ.cpp::main() for easier reading.
- Moved GUI functionality to GUI directory.
- Renamed EntryView to DAQManager.

## Removed

- Moved EntryOperations functionality to EntryView and removed
  EntryOperations.h/.cpp
- Removed TabSignalBus and folded signal emission directly into the tab 
  selector.
- Removed onRunStart() and onRunStop() signals from the UISignalBus.
- Removed slow frame tracking from UI loop, and associated settings from
  DAQState.
- Removed now-superfluous directories.

-------------------------------------------------------------------------------

## 2023-12-20

## Added 

- Retrieved FindPCAP.cmake from 
  https://github.com/bro/cmake/blob/master/FindPCAP.cmake
  in order to link to pcap when compiling with cmake.
- Added a standalone ethernet capture module.

## Changed

- Went through src folder and added required includes and namespace scoping.
- Separated headers and source files for everything involved in the monitor.
- PCapSessionHandler now returns a struct of data for each iteration, rather
  than just the number of packets buffered.

## Fixed

- Fixed system-specific issue where cmake was pointed at the wrong versions of
  gcc and g++. This should have no effect on the git repo.

## Removed

- MonitorConfig.cpp

-------------------------------------------------------------------------------

## 2023-12-19

## Added 

- Added standalone executable for the decode module (under construction).

## Changed

- Restructured the decoder to be usable as an independent module.
    - Removed DAQData dependence from Decoder. Data aggregation is now handled at
      a higher level.
    - Decoder::Refresh() now returns a data bundle, and does not store anything
      in DAQData.
- StartMonitor.cpp is now deprecated, and will not function. I may repair it
  later.


-------------------------------------------------------------------------------

## 2023-12-14

## Notes

- The GUI feels sluggish today. Is it possible I changed something that slowed
  everything down? Opening tabs is slow. Decode updates seem slower too.

## Added

- DAQData now keeps a vector of just the events from the latest iteration of
  the decoder.
- Hit rate graphs are now saved alongside adc and tdc spectra when plots are
  saved.
- Began work on cmake integration.

## Changed

- Added include statements for ROOT functionality to prepare cmake compilation.

-------------------------------------------------------------------------------

## 2023-12-09

## Changed

- View menu entries are no longer checked/unchecked, but simply bring 
  tabs that are already opened to the top.
- Began extensive rewrite of the menu bar. Objectives:
    - Clean up the menu bar code.
    - Create an easy-to-use interface for adding new UI tabs.

-------------------------------------------------------------------------------

## 2023-12-08

## Changed

- Switched to a one-window GUI layout with a tabbable viewport for 
  viewing plots.
- Plot windows now display plots in four rows instead of three.

-------------------------------------------------------------------------------

## 2023-12-07

## Added

- Error logs are now continuously saved to a .log file.
- The run viewer now includes a line providing feedback on run status.
- Hit rate calculations are done once per decode loop, rather than with
  every event.

## Changed

- The Run Viewer is now embedded in the DAQ Manager window.
- RunStats updates are now handled by the EntryView.
- Event counts used by Plots.cpp now come from DAQData.

## Fixed

- The total events counter is now reset when a new run is started.
- Hit rate calculations should now be correct.
- Fixed issue where reporting UI exceptions would deadlock the UI thread.

## Removed
- The packet count is no longer printed to cout.

-------------------------------------------------------------------------------

## 2023-11-20

## Added

- Channel plots now uncheck their menu entries when closed from the close
  button.
- Added a common mutex for UI updates.
- Added noise rate display.

## Changed

- Moved window mapping into view constructors.
- UISignalBus::onUpdate() is now called only when new data is available.

## Fixed

- Fixed issue where html elements would not be correctly formatted until the
  first onUpdate() signal.

-------------------------------------------------------------------------------

## 2023-11-16

## Added

- Added a 'Close All' option in the Run View's view menu that closes all open
  data displays.
- Added a CanvasWindow class to abstract out a lot of canvas-related
  boilerplate in plotting.

## Changed

- Removed dependence on a histogram vector from plotHistograms.
- Started removing view dependencies from operations in order to decouple
  the interface from the underlying program.
    -- The Run View is now started directly from the Main Menu view.
    -- All Run displays are now started directly from the RunMenuBar, except
       for the save progress bar.
    -- Removed ErrorOperations.cpp.
    -- Removed PlottingOperations.cpp.

## Notes

- Spent most of the day trying to figure out how to consistently detect when
  a plot window is closed in order to uncheck the related menu option and 
  stop updates for the window. The issue is that the CloseWindow() signal,
  besides behaving a bit unintelligibly, does not allow passing a parameter
  to its slot. This seems to force hardcoding separate functions for each
  plot window you might have, though I am considering some workarounds using
  IDs for each window.

-------------------------------------------------------------------------------

## 2023-11-15

## Added

- Added and implemented a module for saving plots to disk.
- Added an interface to the Run Viewer for saving plots to disk.
- Added a progress bar to the plot saving interface.
- Added a menu bar to Run Viewer.
- Added per-TDC channel plots

## Changed

- DAT file naming is set up in DataRunOperations now instead of 
  DataCaptureOperations.
- Replaced the radial window selector in the Run Viewer with a menu bar
  popup.

-------------------------------------------------------------------------------

## 2023-11-14

## Changed

- DeviceManager now produces a warning when pcap loads devices successfully, but
  does not find any devices. This can happen e.g. if the program is not run
  with root privileges.

-------------------------------------------------------------------------------

## 2023-11-13

## Added

- Added error log display option to canvas selector / window selector.
- Added real data to the run stats window.
- Added a basic error log window.
- Added tracking for dropped signals and events to DAQData.
- Added tracking for lost packets to DAQData.
- Added 'error levels' to error logger.
- Added color coding by level to the error log display.

## Changed

- Renamed CanvasSelector to WindowSelector.

## Fixed

- Fixed ambiguous warning message for TDC header/trailer mismatch.

-------------------------------------------------------------------------------

## 2023-11-7

## Added

- RunStats.cpp defining a GUI component displaying statistics for a data run.
- The run viewer now contains a run stats window.
- Added noise rate display option to canvas selector.
- Added additional data to Plots.cpp for noise rate display. Began work on 
  restoring the noise rate display.

## Changed

- MonitorHooks now separates function interface and implementation for better
  indenting.
- Monitor.cpp renamed to the more semantically accurate Decoder.cpp.

-------------------------------------------------------------------------------

## 2023-10-24

## Added

- DAQData now tracks:
    Packet count
    Event count
- Added more validation to event decoding. Not quite everything is there yet
  though.

## Changed

- DAQData is now passed around rather than accessed directly with getInstance
  more often. Eventually, DAQData will not need to be a singleton.
    This includes MonitorHooks.cpp, where DAQData is now meant to be accessed
    via function parameters.
- Events can now handle TDC headers and trailers, and TDC headers and trailers
  need not be excluded when assembling events. The hitfinder simply ignores
  TDC headers and trailers.
- Signal.cpp now provides interface for reading header and trailer counts from
  event trailers, as well as header/trailer count error flags.
- Validation is now done on event TDC headers and trailers

## Fixed

- Fixed issue where the settings panel would not fully reenable when a run was
  stopped.

-------------------------------------------------------------------------------

## 2023-10-19

## Added

- Added a "Close All" button to RunViewer's canvas selector that closes any
  open plotting windows.

## Changed

- TDC header and trailer signals are now identified by all identifying bits
  not just the ones that are also the channel ID. This is relevant in cases
  where corrupted signals were classified as TDC headers or trailers.
- Starting and stopping runs now emit signals on the UISignalBus, which are
  connected to methods that disable and enable various UI elements.

## Fixed

- Fixed issue where signal validators would print unreadable characters instead
  of integer TDC error data for TDC error signals.
- Fixed issue where TDC header and trailer signals would be packaged into 
  events. The decode pipeline would ultimately try to bin them into events,
  and fail because their channels don't exist. TDC header and trailer signals
  are now discarded from the signal buffer before it is packaged into an event.
- Fixed issue where the run viewer would open on starting a run even if it was
  already open.

-------------------------------------------------------------------------------

## 2023-10-17

## Added

- Implemented signal bus for custom UI signals, along with an update signal 
  that is run every few UI update frames and connected to histogram plotting.
- Restored full ADC and TDC histogram plotting to the GUI version of the
  monitor.
- Added a window that opens on run start. Plotting windows can be opened and
  close from this window. Plotting windows should now exit nicely, without
  producing segfaults.

## Changed

- DAQData is now passed into the monitor from the decode thread for better
  organization.
- DAQData is reset at the start of the decode thread instead of the monitor
  thread.
- PCapSessionHandler now buffers all available packets at once with a call to
  pcap_dispatch with negative second argument, rather than buffering them one
  at a time. Packet counting has been updated for the new implementation.
- UI loop now makes some naive attempts to maintain a consistent frame rate.

## Fixed

- DeviceSelectorPanel::setDeviceName() would attempt a null dereference if 
  passed the name of a device that does not exist.
- Deleting various views would induce double deletion due to erroneous explicit
  calls to superclass destructors.